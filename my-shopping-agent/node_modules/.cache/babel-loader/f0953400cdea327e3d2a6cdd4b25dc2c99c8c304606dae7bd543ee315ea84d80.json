{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useCallback } from 'react';\nimport { supabase } from '../supabaseClient';\nexport function useProductSearch() {\n  _s();\n  const [data, setData] = useState(null);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const [currentStage, setCurrentStage] = useState('');\n  const [progress, setProgress] = useState(0);\n  const [queryId, setQueryId] = useState(null);\n  const searchProducts = useCallback(async searchRequest => {\n    setIsLoading(true);\n    setError(null);\n    setCurrentStage('Initializing search...');\n    setProgress(0);\n    setData(null);\n    try {\n      // Check for demo mode\n      const isDemoMode = localStorage.getItem('demoMode') === 'true';\n      let authToken = null;\n      if (!isDemoMode) {\n        const {\n          data: {\n            session\n          }\n        } = await supabase.auth.getSession();\n        if (!session) {\n          throw new Error('Authentication required');\n        }\n        authToken = session.access_token;\n      }\n\n      // Start the search\n      const headers = {\n        'Content-Type': 'application/json'\n      };\n      if (authToken) {\n        headers['Authorization'] = `Bearer ${authToken}`;\n      }\n      const response = await fetch('http://localhost:8000/api/search', {\n        method: 'POST',\n        headers,\n        body: JSON.stringify(searchRequest)\n      });\n      if (!response.ok) {\n        let errorMessage = `HTTP error! status: ${response.status}`;\n        try {\n          const errorData = await response.json();\n          errorMessage = errorData.detail || errorMessage;\n        } catch {\n          // Ignore JSON parsing errors\n        }\n\n        // If auth fails, try demo mode\n        if (response.status === 401 && !isDemoMode) {\n          localStorage.setItem('demoMode', 'true');\n          throw new Error('Authentication failed. Please refresh and try demo mode.');\n        }\n        throw new Error(errorMessage);\n      }\n      const result = await response.json();\n      console.log('Search initiated:', result);\n      const searchQueryId = result.query_id;\n      setQueryId(searchQueryId);\n\n      // Poll for status updates\n      let attempts = 0;\n      const maxAttempts = 60; // 2 minutes max\n\n      const pollStatus = async () => {\n        try {\n          const statusHeaders = {};\n          if (authToken) {\n            statusHeaders['Authorization'] = `Bearer ${authToken}`;\n          }\n          const statusResponse = await fetch(`http://localhost:8000/api/search/${searchQueryId}/status`, {\n            headers: statusHeaders\n          });\n          if (!statusResponse.ok) {\n            throw new Error('Failed to get search status');\n          }\n          const status = await statusResponse.json();\n          console.log('Search status:', status);\n\n          // Update current stage and progress\n          setCurrentStage(status.current_stage || 'Processing...');\n          setProgress(status.progress || 0);\n          if (status.status === 'completed') {\n            // Get the results\n            const resultsHeaders = {};\n            if (authToken) {\n              resultsHeaders['Authorization'] = `Bearer ${authToken}`;\n            }\n            const resultsResponse = await fetch(`http://localhost:8000/api/search/${searchQueryId}/results`, {\n              headers: resultsHeaders\n            });\n            if (!resultsResponse.ok) {\n              throw new Error('Failed to get search results');\n            }\n            const resultsData = await resultsResponse.json();\n            console.log('Search results received:', resultsData);\n            setData(resultsData);\n            setIsLoading(false);\n            setCurrentStage('Search completed');\n            setProgress(100);\n            return;\n          } else if (status.status === 'failed') {\n            throw new Error(status.error_message || 'Search failed');\n          } else if (status.status === 'processing' || status.status === 'pending') {\n            // Continue polling\n            attempts++;\n            if (attempts < maxAttempts) {\n              setTimeout(pollStatus, 2000); // Poll every 2 seconds\n            } else {\n              throw new Error('Search timeout - please try again');\n            }\n          }\n        } catch (pollError) {\n          setError(pollError.message);\n          setIsLoading(false);\n        }\n      };\n\n      // Start polling\n      setTimeout(pollStatus, 1000); // Start polling after 1 second\n    } catch (err) {\n      setError(err.message);\n      setIsLoading(false);\n      setCurrentStage('');\n    }\n  }, []);\n  const searchProductsLegacy = useCallback(async (prompt, numProducts = 5) => {\n    setIsLoading(true);\n    setError(null);\n    setCurrentStage('Searching products...');\n    setData(null);\n    try {\n      var _result$results, _result$results2;\n      const {\n        data: {\n          session\n        }\n      } = await supabase.auth.getSession();\n      if (!session) {\n        throw new Error('Authentication required');\n      }\n      const response = await fetch('http://localhost:8000/api/search/legacy', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${session.access_token}`\n        },\n        body: JSON.stringify({\n          prompt,\n          num_products: numProducts\n        })\n      });\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n      const result = await response.json();\n\n      // Convert legacy format to new format\n      const convertedResult = {\n        query_id: 'legacy',\n        results: ((_result$results = result.results) === null || _result$results === void 0 ? void 0 : _result$results.map(product => ({\n          name: product.product_name,\n          price: product.current_price,\n          image_url: product.image_url,\n          source_url: product.product_url,\n          specifications: product.key_specifications\n        }))) || [],\n        total_found: ((_result$results2 = result.results) === null || _result$results2 === void 0 ? void 0 : _result$results2.length) || 0,\n        search_timestamp: new Date().toISOString()\n      };\n      setData(convertedResult);\n      setCurrentStage('Completed');\n    } catch (err) {\n      setError(err.message);\n    } finally {\n      setIsLoading(false);\n    }\n  }, []);\n  return {\n    data,\n    isLoading,\n    error,\n    currentStage,\n    queryId,\n    searchProducts,\n    searchProductsLegacy\n  };\n}\n_s(useProductSearch, \"LejOE9wfCwT1zWr4R0YHtcgydxA=\");","map":{"version":3,"names":["useState","useCallback","supabase","useProductSearch","_s","data","setData","isLoading","setIsLoading","error","setError","currentStage","setCurrentStage","progress","setProgress","queryId","setQueryId","searchProducts","searchRequest","isDemoMode","localStorage","getItem","authToken","session","auth","getSession","Error","access_token","headers","response","fetch","method","body","JSON","stringify","ok","errorMessage","status","errorData","json","detail","setItem","result","console","log","searchQueryId","query_id","attempts","maxAttempts","pollStatus","statusHeaders","statusResponse","current_stage","resultsHeaders","resultsResponse","resultsData","error_message","setTimeout","pollError","message","err","searchProductsLegacy","prompt","numProducts","_result$results","_result$results2","num_products","convertedResult","results","map","product","name","product_name","price","current_price","image_url","source_url","product_url","specifications","key_specifications","total_found","length","search_timestamp","Date","toISOString"],"sources":["D:/Varun-Major/my-shopping-agent/src/hooks/useProductSearch.js"],"sourcesContent":["import { useState, useCallback } from 'react';\r\nimport { supabase } from '../supabaseClient';\r\n\r\nexport function useProductSearch() {\r\n  const [data, setData] = useState(null);\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [error, setError] = useState(null);\r\n  const [currentStage, setCurrentStage] = useState('');\r\n  const [progress, setProgress] = useState(0);\r\n  const [queryId, setQueryId] = useState(null);\r\n\r\n  const searchProducts = useCallback(async (searchRequest) => {\r\n    setIsLoading(true);\r\n    setError(null);\r\n    setCurrentStage('Initializing search...');\r\n    setProgress(0);\r\n    setData(null);\r\n\r\n    try {\r\n      // Check for demo mode\r\n      const isDemoMode = localStorage.getItem('demoMode') === 'true';\r\n      \r\n      let authToken = null;\r\n      if (!isDemoMode) {\r\n        const { data: { session } } = await supabase.auth.getSession();\r\n        if (!session) {\r\n          throw new Error('Authentication required');\r\n        }\r\n        authToken = session.access_token;\r\n      }\r\n\r\n      // Start the search\r\n      const headers = {\r\n        'Content-Type': 'application/json',\r\n      };\r\n      \r\n      if (authToken) {\r\n        headers['Authorization'] = `Bearer ${authToken}`;\r\n      }\r\n\r\n      const response = await fetch('http://localhost:8000/api/search', {\r\n        method: 'POST',\r\n        headers,\r\n        body: JSON.stringify(searchRequest),\r\n      });\r\n\r\n      if (!response.ok) {\r\n        let errorMessage = `HTTP error! status: ${response.status}`;\r\n        try {\r\n          const errorData = await response.json();\r\n          errorMessage = errorData.detail || errorMessage;\r\n        } catch {\r\n          // Ignore JSON parsing errors\r\n        }\r\n        \r\n        // If auth fails, try demo mode\r\n        if (response.status === 401 && !isDemoMode) {\r\n          localStorage.setItem('demoMode', 'true');\r\n          throw new Error('Authentication failed. Please refresh and try demo mode.');\r\n        }\r\n        throw new Error(errorMessage);\r\n      }\r\n\r\n      const result = await response.json();\r\n      console.log('Search initiated:', result);\r\n      const searchQueryId = result.query_id;\r\n      setQueryId(searchQueryId);\r\n\r\n      // Poll for status updates\r\n      let attempts = 0;\r\n      const maxAttempts = 60; // 2 minutes max\r\n      \r\n      const pollStatus = async () => {\r\n        try {\r\n          const statusHeaders = {};\r\n          if (authToken) {\r\n            statusHeaders['Authorization'] = `Bearer ${authToken}`;\r\n          }\r\n\r\n          const statusResponse = await fetch(\r\n            `http://localhost:8000/api/search/${searchQueryId}/status`,\r\n            { headers: statusHeaders }\r\n          );\r\n\r\n          if (!statusResponse.ok) {\r\n            throw new Error('Failed to get search status');\r\n          }\r\n\r\n          const status = await statusResponse.json();\r\n          console.log('Search status:', status);\r\n          \r\n          // Update current stage and progress\r\n          setCurrentStage(status.current_stage || 'Processing...');\r\n          setProgress(status.progress || 0);\r\n\r\n          if (status.status === 'completed') {\r\n            // Get the results\r\n            const resultsHeaders = {};\r\n            if (authToken) {\r\n              resultsHeaders['Authorization'] = `Bearer ${authToken}`;\r\n            }\r\n\r\n            const resultsResponse = await fetch(\r\n              `http://localhost:8000/api/search/${searchQueryId}/results`,\r\n              { headers: resultsHeaders }\r\n            );\r\n\r\n            if (!resultsResponse.ok) {\r\n              throw new Error('Failed to get search results');\r\n            }\r\n\r\n            const resultsData = await resultsResponse.json();\r\n            console.log('Search results received:', resultsData);\r\n            setData(resultsData);\r\n            setIsLoading(false);\r\n            setCurrentStage('Search completed');\r\n            setProgress(100);\r\n            return;\r\n          } else if (status.status === 'failed') {\r\n            throw new Error(status.error_message || 'Search failed');\r\n          } else if (status.status === 'processing' || status.status === 'pending') {\r\n            // Continue polling\r\n            attempts++;\r\n            if (attempts < maxAttempts) {\r\n              setTimeout(pollStatus, 2000); // Poll every 2 seconds\r\n            } else {\r\n              throw new Error('Search timeout - please try again');\r\n            }\r\n          }\r\n        } catch (pollError) {\r\n          setError(pollError.message);\r\n          setIsLoading(false);\r\n        }\r\n      };\r\n\r\n      // Start polling\r\n      setTimeout(pollStatus, 1000); // Start polling after 1 second\r\n\r\n    } catch (err) {\r\n      setError(err.message);\r\n      setIsLoading(false);\r\n      setCurrentStage('');\r\n    }\r\n  }, []);\r\n\r\n  const searchProductsLegacy = useCallback(async (prompt, numProducts = 5) => {\r\n    setIsLoading(true);\r\n    setError(null);\r\n    setCurrentStage('Searching products...');\r\n    setData(null);\r\n\r\n    try {\r\n      const { data: { session } } = await supabase.auth.getSession();\r\n      if (!session) {\r\n        throw new Error('Authentication required');\r\n      }\r\n\r\n      const response = await fetch('http://localhost:8000/api/search/legacy', {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n          'Authorization': `Bearer ${session.access_token}`,\r\n        },\r\n        body: JSON.stringify({\r\n          prompt,\r\n          num_products: numProducts,\r\n        }),\r\n      });\r\n\r\n      if (!response.ok) {\r\n        throw new Error(`HTTP error! status: ${response.status}`);\r\n      }\r\n\r\n      const result = await response.json();\r\n      \r\n      // Convert legacy format to new format\r\n      const convertedResult = {\r\n        query_id: 'legacy',\r\n        results: result.results?.map(product => ({\r\n          name: product.product_name,\r\n          price: product.current_price,\r\n          image_url: product.image_url,\r\n          source_url: product.product_url,\r\n          specifications: product.key_specifications,\r\n        })) || [],\r\n        total_found: result.results?.length || 0,\r\n        search_timestamp: new Date().toISOString(),\r\n      };\r\n\r\n      setData(convertedResult);\r\n      setCurrentStage('Completed');\r\n    } catch (err) {\r\n      setError(err.message);\r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  }, []);\r\n\r\n  return {\r\n    data,\r\n    isLoading,\r\n    error,\r\n    currentStage,\r\n    queryId,\r\n    searchProducts,\r\n    searchProductsLegacy,\r\n  };\r\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}